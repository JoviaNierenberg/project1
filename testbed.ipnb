{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3d4f4c7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'GAUUCAAUCA'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def transcribe(seq: str) -> str:\n",
    "    \"\"\"\n",
    "    transcribes DNA to RNA by generating\n",
    "    the complement sequence with T -> U replacement\n",
    "    \"\"\"\n",
    "    # replacement function\n",
    "    def replace_all(text, dictionary):\n",
    "        for key, val in dictionary.items():\n",
    "            text = text.replace(key, val)\n",
    "        return text\n",
    "    # create dictionary with text and replacement text\n",
    "    d = { \"A\":\"U\", \"T\":\"A\", \"G\":\"P\", \"C\":\"Q\", \"P\":\"C\", \"Q\":\"G\"}\n",
    "    # return result of running replace_all on the sequence and the dictionary\n",
    "    return replace_all(seq, d)\n",
    "\n",
    "def reverse_transcribe(seq: str) -> str:\n",
    "    \"\"\"\n",
    "    transcribes DNA to RNA then reverses\n",
    "    the strand\n",
    "    \"\"\"\n",
    "    transcribed = transcribe(seq)\n",
    "    return transcribed[::-1]\n",
    "\n",
    "reverse_transcribe(\"TGATTGAATC\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c03d0eb2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
